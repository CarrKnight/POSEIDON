package uk.ac.ox.oxfish.biology.boxcars;

import org.junit.Test;

import static org.junit.Assert.*;

public class LBSPRTest {


    @Test
    public void probMatrix() {

        final LBSPR.AgeToLength ageToLength = LBSPR.buildAgeToLengthKey(
                new double[]{2.5,7.5,12.5,17.5,22.5,27.5,32.5,37.5,42.5,47.5,52.5,57.5,62.5,67.5,72.5,77.5,82.5,87.5,92.5,97.5,102.5},
                1.5,
                100,
                0.1,
                100
        );

        //computed the numbers in R for comparison

        assertArrayEquals(
                ageToLength.getRelativeLengthAtAge(),
                new double[]{0,0.0302346408917507,0.0595551482736483,0.0879891606440902,0.1155634808614,0.142304101409106,
                        0.168236228897329,0.193384307823387,0.217772043613997,0.241422424970816,0.264357745540359,0.286599624928744,
                        0.308169029081063,0.329086290044589,0.349371125134443,0.369042655519807,0.388119424248178,0.406619413724672,
                        0.424560062662843,0.441958282523004,0.458830473453536,0.475192539750227,0.491059904848191,0.506447525860519,
                        0.521369907677362,0.535841116638722,0.549874793793866,0.563484167759834,0.576682067191179,0.589480932872692,
                        0.601892829446503,0.613929456784619,0.625602161017619,0.636921945229899,0.647899479831548,0.65854511261664,
                        0.668868878517409,0.678880509063518,0.688589441555324,0.698004827959798,0.707135543537476,0.715990195208579,
                        0.724577129666183,0.732904441244101,0.740979979546868,0.748811356849042,0.756405955270797,0.763770933736554,
                        0.770913234723223,0.777839590804419,0.784556530996812,0.791070386914596,0.797387298737886,0.803513221000653,
                        0.809453928203675,0.815215020257771,0.820801927762467,0.826219917125062,0.831474095524925,0.836569415727686,
                        0.841510680753889,0.846302548406473,0.85094953566138,0.855456022925407,0.859826258165323,0.864064360912147,
                        0.868174326144359,0.872160028053698,0.876025223697106,0.879773556538259,0.883408559882017,0.886933660205036,
                        0.890352180385682,0.893667342836284,0.896882272540695,0.9,0.903023464089175,0.905955514827365,0.908798916064409,
                        0.91155634808614,0.914230410140911,0.916823622889733,0.919338430782339,0.9217772043614,0.924142242497082,
                        0.926435774554036,0.928659962492874,0.930816902908106,0.932908629004459,0.934937112513444,0.936904265551981,
                        0.938811942424818,0.940661941372467,0.942456006266284,0.9441958282523,0.945883047345354,0.947519253975023,
                        0.949105990484819,0.950644752586052,0.952136990767736,0.953584111663872}
                , .0001);


        assertArrayEquals(
                ageToLength.getAgeToLengthKey()[0],
                new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                .001
        );

        assertArrayEquals(
                ageToLength.getAgeToLengthKey()[9],
                new double[]{0,0,0,0,0.676083996633745,0.323916003366255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                .001
        );
        assertArrayEquals(
                ageToLength.getAgeToLengthKey()[49],
                new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0.0380479211891531,0.109432932410976,0.208216346994095,0.262078437645448,0.218221452273814,0.120202437543582,0.0438004719429317,0,0},
                .001
        );
        assertArrayEquals(
                ageToLength.getAgeToLengthKey()[98],
                new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0147408071584518,0.0447332732716233,0.102943763385379,0.179650882000543,0.237748954698158,0.238598565526688,0.181583753959157},
                .001
        );


    }
}