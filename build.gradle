plugins {
    id 'java'
    id 'application'
    id "us.kirchmeier.capsule" version "1.0-rc1"

}

mainClassName = 'Main'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets
        {
  main {
    java {
      srcDir 'src/main/java'
    }
    resources {
      srcDir 'src/main/resources'
    }
  }
  test {
    java {
      srcDir 'src/test/java'
    }
    resources {
      srcDir 'src/test/resources'
    }
  }
}



//here we add all the dependencies notice that mason and geomason are not on maven so we need to add them separately
dependencies
{
    //mason libraries. They aren't on maven so we have to lug their jars around
    compile fileTree(dir: 'libs/mason', include: '*.jar')
    compile fileTree(dir: 'libs/geomason', include: '*.jar')
    //a jury-rigged version of OSMOSE, hopefully linkable with this simulation
    compile fileTree(dir: 'libs/osmose', include: '*.jar')

    //guava. Useful for PreConditions and sometimes specialized collections
    compile "com.google.guava:guava:18.0"
    //shiny new genetic algorithm library. So far very unimpressive. Might switch back to watchmaker
    compile "org.bitbucket.fwilhelm:org.jenetics:3.1.0"
    //metawidget + apache binders. Useful for the gui
    compile "org.metawidget.modules:metawidget-all:4.1"
    compile "commons-beanutils:commons-beanutils:1.8.3"

    //logger:
    compile "com.esotericsoftware:minlog:1.3.0"

    //jung social network:
    compile "net.sf.jung:jung-api:2.0.1"
    compile 'net.sf.jung:jung-graph-impl:2.0.1'
    compile 'net.sf.jung:jung-algorithms:2.0.1'

    //yaml parser, useful for reading configuration files
    compile 'org.yaml:snakeyaml:1.15'

    //testing:
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.9.5"


}


//this makes tests multi-threaded when called from gradle. Useful!
test{
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(),3)
}

//this just mentions what the gradle version for the "wrapper" gradlew ought to be
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}


//this task creates a single executable jar ("fat" because it contains all its requirements); this is mostly what gets
//distributed
task fatJar(type: FatCapsule) {
    archiveName = "oxfish_executable.jar"
    applicationClass 'Main'
 //   applicationClass 'uk.ac.ox.oxfish.experiments.dedicated.habitat.HabitatDeployment'

    capsuleManifest {
        minJavaVersion = '1.8.0'
        minUpdateVersion =  ['1.8.0':'31']
    }
}

//this task can be called as ./gradlew buildSampleFiles and simply rebuilds the "YAML Samples" folder
task buildSampleFiles(type: JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = 'uk.ac.ox.oxfish.experiments.BuildSampleInputs'
}




test {
  useJUnit()
  testLogging {
    events "passed", "skipped", "failed"
  }
}


