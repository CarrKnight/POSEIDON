plugins {
    id 'java'
    id 'idea'
    id 'application'
    id "us.kirchmeier.capsule" version "1.0.1"
}


mainClassName = 'Main'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets
        {
  main {
    java {
      srcDir 'src/main/java'
    }
    resources {
      srcDir 'src/main/resources'
    }
  }
  test {
    java {
      srcDir 'src/test/java'
    }
    resources {
      srcDir 'src/test/resources'
    }
  }
}



//here we add all the dependencies notice that mason and geomason are not on maven so we need to add them separately
dependencies
{
    //mason libraries. They aren't on maven so we have to lug their jars around
    compile fileTree(dir: 'libs/mason', include: '*.jar')
    compile fileTree(dir: 'libs/geomason', include: '*.jar')
    //a jury-rigged version of OSMOSE, hopefully linkable with this simulation
    compile fileTree(dir: 'libs/osmose', include: '*.jar')

    //guava. Useful for PreConditions and sometimes specialized collections
    compile "com.google.guava:guava:18.0"
    //metawidget + apache binders. Useful for the gui
    compile "org.metawidget.modules:metawidget-all:4.1"
    compile "commons-beanutils:commons-beanutils:1.8.3"

    //logger:
    compile "com.esotericsoftware:minlog:1.3.0"


    //jung social network:
    compile "net.sf.jung:jung-api:2.0.1"
    compile 'net.sf.jung:jung-graph-impl:2.0.1'
    compile 'net.sf.jung:jung-io:2.0.1'
    compile 'net.sf.jung:jung-algorithms:2.0.1'

    //yaml parser, useful for reading configuration files
    compile 'org.yaml:snakeyaml:1.15'

    //testing:
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.9.5"


}


//this makes tests multi-threaded when called from gradle. Useful!
test{
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(),3)
}

//this just mentions what the gradle version for the "wrapper" gradlew ought to be
task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}


//this task creates a single executable jar ("fat" because it contains all its requirements); this is mostly what gets
//distributed
task fatJar(type: FatCapsule) {
    archiveName = "oxfish_executable.jar"
    applicationClass 'Main'
 //   applicationClass 'uk.ac.ox.oxfish.experiments.dedicated.habitat.HabitatDeployment'

    capsuleManifest {
        minJavaVersion = '1.8.0'
        minUpdateVersion =  ['1.8.0':'31']
    }
}

//this task creates a single executable jar ("fat" because it contains all its requirements); this is mostly what gets
//distributed
task buildHeadless(type: FatCapsule, dependsOn: test) {
    archiveName = "yamler.jar"
    applicationClass 'YamlMain'
    //   applicationClass 'uk.ac.ox.oxfish.experiments.dedicated.habitat.HabitatDeployment'

    capsuleManifest {
        minJavaVersion = '1.8.0'
        minUpdateVersion =  ['1.8.0':'31']
    }
}
//this task takes the yamler.jar from the build/libs folder and place it in the runs optimization folder. This is important
//to make optimization.py work correctly
task deployHeadless(type: Copy, dependsOn: buildHeadless) {
    from 'build/libs/'
    into 'runs/optimization/'
    include 'yamler.jar'
}

//this task can be called as ./gradlew buildSampleFiles and simply rebuilds the "YAML Samples" folder
task buildSampleFiles(type: JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = 'uk.ac.ox.oxfish.experiments.BuildSampleInputs'
}


//easy function to get formatted date
def getDate() {
    if(ext.date==null) {
        def date = new Date()
        def formattedDate = date.format('yyyy-MM-dd=HH-mm-ss')
        ext.date = formattedDate.toString()
    }
    return ext.date
}

ext{
    date=null;
    website_folder = '/home/carrknight/code/carrknight.github.io';

}
//creates the CSV the dashboard will use
task prepareDashBoard(type: JavaExec, dependsOn: test) {
            classpath = sourceSets.main.runtimeClasspath
            main = 'uk.ac.ox.oxfish.experiments.Dashboard'
            args = [ date ]
        }

task dashboard(type: Exec, dependsOn: prepareDashBoard ) {
    executable = 'sh'
    workingDir = "${projectDir}"
    args = [ "dashboard.sh",  date, website_folder ]
}


task testCSV(){
    def output = file("build/reports/multitest/" + date + ".csv")
    doLast {
        file("build/reports").mkdirs()
        output.text = '"Project","Test","Time","Result","Duration"\r\n'
        allprojects.each { project2 ->
            logger.info("Processing project ${project2.name}")
            def resultFiles = project2.fileTree("build") { include '**/TEST-*.xml' }
            resultFiles.each { file ->
                logger.info("Processing report ${file}")
                def testsuite = new XmlSlurper().parse(file)
                testsuite.testcase.each { testcase ->
                    def result = "pass"
                    if (!testcase.failure.isEmpty()) { result = "fail" }
                    else if (!testcase.skipped.isEmpty()) { result = "skip" }
                    output << "\"${project2.name}\",\"${testcase.@classname}.${testcase.@name}\",\"${testcase.@timestamp}\",\"${result}\",\"${testcase.@time}\"\r\n"
                }
            }
        }
    }
}

test {
  useJUnit()
  testLogging {
    events "passed", "skipped", "failed"
  }
}


